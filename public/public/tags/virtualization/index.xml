<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Virtualization on Espen Braastad</title>
    <link>http://localhost:1313/tags/virtualization/</link>
    <description>Recent content in Virtualization on Espen Braastad</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <author>Espen Braastad</author>
    
    <lastBuildDate>Mon, 24 Sep 2012 16:58:32 &#43;0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/virtualization/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>KVM/Xen and libvirt: currentMemory, memory and ballooning. Where did my memory go?</title>
      <link>http://localhost:1313/post/memory-ballooning/</link>
      <pubDate>Mon, 24 Sep 2012 16:58:32 &#43;0100</pubDate>
      <author>Espen Braastad</author>
      <guid>http://localhost:1313/post/memory-ballooning/</guid>
      <description>&lt;p&gt;KVM and Xen provide a method to change the amount of memory in use by guests at runtime. The method is called memory ballooning [&lt;a href=&#34;http://www.linux-kvm.org/page/FAQ#Is_dynamic_memory_management_for_guests_supported.3F&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;http://rwmj.wordpress.com/2010/07/17/virtio-balloon&#34;&gt;2&lt;/a&gt;], and it must be supported by the guest operating system to work.&lt;/p&gt;

&lt;p&gt;In libvirt, memory allocation (and hence the ballooning capability) for a guest can be configured using the &lt;code&gt;memory&lt;/code&gt;, &lt;code&gt;currentMemory&lt;/code&gt; and &lt;code&gt;memballoon&lt;/code&gt; tags:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;domain type=&#39;kvm&#39;&amp;gt;
  [...]
  &amp;lt;memory unit=&#39;KiB&#39;&amp;gt;16777216&amp;lt;/memory&amp;gt;
  &amp;lt;currentMemory unit=&#39;KiB&#39;&amp;gt;1048576&amp;lt;/currentMemory&amp;gt;
  [...]
  &amp;lt;devices&amp;gt;
    &amp;lt;memballoon model=&#39;virtio&#39;/&amp;gt;
  &amp;lt;/devices&amp;gt;
&amp;lt;/domain&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The guest can never use more memory than specified in the &lt;code&gt;memory&lt;/code&gt; tag and it is the amount of memory the guest will use at boot time. The &lt;code&gt;currentMemory&lt;/code&gt; tag, if set, should be less than or equal (default) to &lt;code&gt;memory&lt;/code&gt;. The guest will, when the balloon driver is loaded some time during the boot process, adjust itself to use the amount of memory specified by &lt;code&gt;currentMemory&lt;/code&gt;. The &lt;code&gt;memballoon&lt;/code&gt; tag is being added automatically, so there is really no need to specify it.&lt;/p&gt;

&lt;p&gt;The command line tool &lt;code&gt;virsh&lt;/code&gt; can later be used on the host to see the current memory configuration for each guest:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@host ~]# virsh dominfo guest
Id:             -
Name:           guest
UUID:           4f610a1f-7539-47cf-8299-9534500b340d
OS Type:        hvm
State:          shut off
CPU(s):         1
Max memory:     16777216 kB
Used memory:    1048576 kB
Persistent:     yes
Autostart:      disable
Managed save:   no
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So far, so good. At this point it makes sense to set &lt;code&gt;memory&lt;/code&gt; really high on all guests to ensure that we are able to reallocate memory on the fly for all our Linux guests. Doing this might not be a good idea.&lt;/p&gt;

&lt;p&gt;Linux as a guest, even though it has a balloon driver, does not seem to behave like one would expect. When &lt;code&gt;memory&lt;/code&gt; is set higher than &lt;code&gt;currentMemory&lt;/code&gt;, the guest operating system does not see (or use) the amount of memory that it should. Ideally, the value that libvirt reports as Used memory at the host should be visible inside the guest also.&lt;/p&gt;

&lt;p&gt;The graphs below show different guests (RHEL6, SL6 and Ubuntu Precise) on KVM (SL6) and Xen (RHEL5). The Y-axis show the amount of memory visible inside the guest (as reported by &lt;code&gt;free -m&lt;/code&gt;), while the X-axis show the value of memory. The value of currentMemory is 1024M in all plots â€“ which means that the guests should use 1024M of memory and that the graphs should stay flat out at 1024M, given zero overhead. The graphs show that this is not the reality.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/kvm-precise-1024.png&#34; alt=&#34;KVM, Ubuntu Precise, 1024 MB ram&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/kvm-rhel6-1024.png&#34; alt=&#34;KVM, RHEL6, 1024 MB ram&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/xen-sl6-1024.png&#34; alt=&#34;Xen, SL6, 1024 MB ram&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://localhost:1313/img/xen-precise-1024.png&#34; alt=&#34;Xen, Ubuntu Precise, 1024 MB ram&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The graphs with KVM do not have values for 32G memory because the guests went ballistic and OOM-ed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>KVM with iPXE in RHEL6</title>
      <link>http://localhost:1313/post/kvm-with-ipxe-in-rhel6/</link>
      <pubDate>Wed, 02 Nov 2011 22:29:50 CET</pubDate>
      <author>Espen Braastad</author>
      <guid>http://localhost:1313/post/kvm-with-ipxe-in-rhel6/</guid>
      <description>&lt;p&gt;A while ago I discovered the amazing &lt;a href=&#34;http://ipxe.org&#34;&gt;iPXE&lt;/a&gt; project. It is a complete PXE implementation with lots of nifty features, based on the &lt;a href=&#34;http://etherboot.org/&#34;&gt;gPXE&lt;/a&gt; project. Redhat ships the gPXE firmware for qemu and KVM, and you might want to use iPXE instead as the iPXE project currently seems to be more active. The major features (copied from &lt;a href=&#34;http://ipxe.org&#34;&gt;ipxe.org&lt;/a&gt;):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;boot from a web server via HTTP&lt;/li&gt;
&lt;li&gt;boot from an iSCSI SAN&lt;/li&gt;
&lt;li&gt;boot from a Fibre Channel SAN via FCoE&lt;/li&gt;
&lt;li&gt;boot from an AoE SAN&lt;/li&gt;
&lt;li&gt;boot from a wireless network&lt;/li&gt;
&lt;li&gt;boot from a wide-area network&lt;/li&gt;
&lt;li&gt;boot from an Infiniband network&lt;/li&gt;
&lt;li&gt;control the boot process with a script&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First, download the source code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;espen@luft:~$ mkdir ~/git
espen@luft:~$ cd ~/git
espen@luft:~/git$ git clone git://git.ipxe.org/ipxe.git
Cloning into ipxe...
remote: Counting objects: 33376, done.
remote: Compressing objects: 100% (9193/9193), done.
remote: Total 33376 (delta 24642), reused 30782 (delta 22666)
Receiving objects: 100% (33376/33376), 8.02 MiB | 1.94 MiB/s, done.
Resolving deltas: 100% (24642/24642), done.
espen@luft:~/git$ cd ipxe/
espen@luft:~/git/ipxe$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then change the general configuration file (&lt;em&gt;src/config/general.h&lt;/em&gt;) to suit your needs. Use the &lt;strong&gt;#define&lt;/strong&gt; and &lt;strong&gt;#undef&lt;/strong&gt; to activate and deactivate various features such as VLAN support, DHCP support, etc. Below is a small part of &lt;a href=&#34;https://github.com/ipxe/ipxe/blob/master/src/config/general.h&#34;&gt;the header file&lt;/a&gt; for you to see.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[...]
#define IWMGMT_CMD   /* Wireless interface management commands */
#define FCMGMT_CMD   /* Fibre Channel management commands */
#define ROUTE_CMD    /* Routing table management commands */
#define IMAGE_CMD    /* Image management commands */
#define DHCP_CMD     /* DHCP management commands */
#define SANBOOT_CMD  /* SAN boot commands */
#define LOGIN_CMD    /* Login command */
#undef  TIME_CMD     /* Time commands */
#undef  DIGEST_CMD   /* Image crypto digest commands */
#undef  LOTEST_CMD   /* Loopback testing commands */
#undef  VLAN_CMD     /* VLAN commands */
#undef  PXE_CMD      /* PXE commands */
#undef  REBOOT_CMD   /* Reboot command */
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now it&amp;rsquo;s time compile the firmware.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;espen@luft:~/git/ipxe$ cd src/
espen@luft:~/git/ipxe/src$ make bin/virtio-net.rom
  [DEPS] arch/i386/drivers/net/undirom.c
  [DEPS] arch/i386/drivers/net/undipreload.c
  [DEPS] arch/i386/drivers/net/undionly.c
  [DEPS] arch/i386/drivers/net/undinet.c
[...]
  [BIN] bin/virtio-net.rom.bin
  [ZINFO] bin/virtio-net.rom.zinfo
  [ZBIN] bin/virtio-net.rom.zbin
  [FINISH] bin/virtio-net.rom
[...]
espen@luft:~/git/ipxe/src$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The firmware compiled successfully, and it is ready to use. Log onto the RHEL 6 node, and verify that you have installed the package &lt;strong&gt;gpxe-roms-qemu&lt;/strong&gt; (&lt;strong&gt;qemu-kvm&lt;/strong&gt; currently depends on &lt;strong&gt;gpxe-roms-qemu&lt;/strong&gt;). The directory &lt;em&gt;/usr/share/gpxe/&lt;/em&gt; contains the gPXE boot roms from this package.&lt;/p&gt;

&lt;p&gt;To use your custom iPXE boot firmware instead, you can build a new rpm package that contains the new rom - or you can simply replace &lt;em&gt;/usr/share/gpxe/virtio-net.rom&lt;/em&gt; [gPXE] with your &lt;em&gt;~/git/ipxe/src/bin/virtio-net.rom&lt;/em&gt; [iPXE]. As least you will have iPXE boot firmware until the &lt;strong&gt;qemu-roms-qemu&lt;/strong&gt; package is updated ;)&lt;/p&gt;

&lt;p&gt;Make sure that your virtual machines are using the &lt;strong&gt;&lt;a href=&#34;http://wiki.libvirt.org/page/Virtio&#34;&gt;virtio&lt;/a&gt;&lt;/strong&gt; network device driver, and you are all set:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[...]
&amp;lt;interface type=&#39;bridge&#39;&amp;gt;
  [...]
  &amp;lt;model type=&#39;virtio&#39;/&amp;gt;
&amp;lt;/interface&amp;gt;
[...]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your virtual machines will now be booted using the iPXE boot firmware. Have a look at the &lt;a href=&#34;http://ipxe.org/scripting&#34;&gt;iPXE scripting documentation&lt;/a&gt; for more inspiration!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>